{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","props","getData","a","axios","get","results","setData","data","setLoading","className","onClick","setTimeout","Users","map","user","src","avatar","alt","first_name","last_name","email","id","loading","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAuBA,SAASA,EAAOC,GAEd,IAAMC,EAAO,uCAAG,4BAAAC,EAAA,sEACMC,IAAMC,IAAI,sCADhB,OACVC,EADU,OAEdL,EAAMM,QAAQD,EAAQE,MACtBP,EAAMQ,YAAW,GAHH,2CAAH,qDAMb,OACE,sBAAKC,UAAU,SAAf,UACE,qBAAKA,UAAU,cAAf,0BACA,wBAAQA,UAAU,gBAAgBC,QAAS,WACzCV,EAAMQ,YAAW,GACjBG,WAAWV,EAAS,MAFtB,0BAUN,SAASW,EAAMZ,GAA0B,IAAD,EACtC,OACE,qBAAKS,UAAU,QAAf,SAEIT,EAAMO,KAAN,UACEP,EAAMO,YADR,aACE,EAAYA,KAAKM,KAAI,SAACC,GACpB,OACE,sBAAKL,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,qBAAKM,IAAKD,EAAKE,OAAQC,IAAI,cAE7B,sBAAKR,UAAU,aAAf,UACE,qBAAIA,UAAU,OAAd,UAAqB,mBAAGA,UAAU,oBAAlC,UAA4DK,EAAKI,WAAjE,YAA+EJ,EAAKK,cACpF,qBAAIV,UAAU,OAAd,UAAqB,mBAAGA,UAAU,oBAAuBK,EAAKM,cANvCN,EAAKO,OAYpCrB,EAAMsB,QACJ,qBAAKb,UAAU,SAASM,IAAI,wDAAwDE,IAAI,eAExF,oBAAIR,UAAU,UAAd,gDA6BGc,MArBf,WAEE,MAAwBC,mBAAsB,MAA9C,mBAAOjB,EAAP,KAAaD,EAAb,KACA,EAA8BkB,oBAAkB,GAAhD,mBAAOF,EAAP,KAAgBd,EAAhB,KAEA,OACI,uBAAMC,UAAU,OAAhB,UACE,cAACV,EAAD,CAAQO,QAASA,EAASE,WAAYA,IACtC,cAACI,EAAD,CAAOL,KAAMA,EAAMe,QAASA,IAC5B,sBAAKb,UAAU,SAAf,UACA,uBACA,uBACA,uBACA,uBACA,uBACA,8BC3EOgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7a96b031.chunk.js","sourcesContent":["import axios from 'axios';\nimport React, { useState } from 'react';\nimport './App.css';\n\n\ninterface User {\n  id: number\n  email: string\n  first_name: string\n  last_name: string\n  avatar: string\n}\ninterface Data {\n  page: number\n  per_page: number\n  total_pages: number\n  data: User[]\n  support: {\n    url: string,\n    text: string\n  }\n}\n\nfunction Navbar(props: any): JSX.Element {\n\n  const getData = async () => {\n    var results = await axios.get(\"https://reqres.in/api/users?page=1\");\n    props.setData(results.data);\n    props.setLoading(false);\n  }\n\n  return (\n    <div className=\"navbar\">\n      <div className=\"navbar-logo\">LetsGrowMore</div>\n      <button className=\"navbar-button\" onClick={() => {\n        props.setLoading(true)\n        setTimeout(getData, 1000)\n      }}>\n        Get Users\n      </button>\n    </div>\n  )\n}\n\nfunction Users(props: any): JSX.Element {\n  return (\n    <div className=\"users\">\n      {\n        props.data ? (\n          props.data?.data.map((user: User) => {\n            return (\n              <div className=\"user\" key={user.id}>\n                <div className=\"user-profile\">\n                  <img src={user.avatar} alt=\"Profile\" />\n                </div>\n                <div className=\"user-about\">\n                  <h4 className=\"text\"><i className=\"fas fa-user-tie\"></i>{`${user.first_name} ${user.last_name}`}</h4>\n                  <h4 className=\"text\"><i className=\"fas fa-envelope\"></i>{user.email}</h4>\n                </div>\n              </div>\n            )\n          })\n        ) : (\n          props.loading ? (\n            <img className=\"loader\" src=\"https://media.giphy.com/media/feN0YJbVs0fwA/giphy.gif\" alt=\"loading...\" />\n          ) : (\n            <h1 className=\"message\">Please Click on Get Users Button</h1>\n          )\n        )\n      }\n    </div>\n  )\n}\n\nfunction App(): JSX.Element {\n\n  const [data, setData] = useState<Data | null>(null);\n  const [loading, setLoading] = useState<Boolean>(false);\n\n  return (\n      <main className=\"main\">\n        <Navbar setData={setData} setLoading={setLoading} />\n        <Users data={data} loading={loading} />\n        <div className=\"circle\">\n        <li></li>\n        <li></li>\n        <li></li>\n        <li></li>\n        <li></li>\n        <li></li>\n      </div>\n      </main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}